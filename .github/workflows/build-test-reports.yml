name: Unit Test Results
on:
  workflow_run:
    workflows: [Build and Test]
    types:
      - completed
jobs:
  unit-test-results:
    name: Unit Test Results
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion != 'skipped'
    steps:
      - name: Download and Extract Artifacts
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          mkdir -p artifacts && cd artifacts
          
          artifacts_url=${{ github.event.workflow_run.artifacts_url }}
          
          gh api "$artifacts_url" -q '.artifacts[] | [.name, .archive_download_url] | @tsv' | while read artifact
          do
            IFS=$'\t' read name url <<< "$artifact"
            gh api $url > "$name.zip"
            unzip -d "$name" "$name.zip"
          done
      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          report_individual_runs: true
          check_name: "Scavenger Test Results"
          junit_files: "artifacts/**/**/*.xml"
      - name: Comment on Pull Request
        uses: actions/github-script@v4
        if: always()
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const { owner, repo } = context.repo;
            const prNumber = context.payload.workflow_run.head_repository.pull_requests[0].number;
            const runId = context.payload.workflow_run.id;
            const checks = await github.checks.listForRef({
              owner,
              repo,
              ref: context.payload.workflow_run.head_sha,
            });
            const check = checks.data.check_runs.find(
              (check) => check.name === "Scavenger Test Results"
            );
            const checkUrl = check.html_url;
            const body = `Unit test results are available at ${checkUrl}.\n\nWorkflow run ID: ${runId}`;
            const { data: comments } = await github.issues.listComments({
              owner,
              repo,
              issue_number: prNumber,
            });
            const existingComment = comments.find(
              (comment) =>
                comment.user.login === "github-actions[bot]" &&
                comment.body.includes("Unit test results are available at")
            );
            if (existingComment) {
              const commentId = existingComment.id;
              await github.issues.updateComment({
                owner,
                repo,
                comment_id: commentId,
                body,
              });
            } else {
              await github.issues.createComment({
                owner,
                repo,
                issue_number: prNumber,
                body,
              });
            }
